{"version":3,"sources":["components/Section/Section.js","components/Section/FeedbackOptions/FeedbackOptions.js","components/Section/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","FeedbackOptions","goodFeedback","neutralFeedback","badFeedback","type","onClick","Statistics","good","bad","neutral","total","positivePercentage","App","state","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","ceil","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAgBeA,MAdf,YAAqC,IAAnBC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrB,OACC,kCACI,sBAAKC,UAAU,YAAf,UACI,6BAAKF,IACJC,QCMCE,MAXf,YAAwE,IAA9CC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,gBAAiBC,EAAc,EAAdA,YACrD,OACI,sBAAKJ,UAAU,UAAf,UACI,wBAAQK,KAAM,SAAUC,QAASJ,EAAjC,kBACA,wBAAQG,KAAM,SAAUC,QAASH,EAAjC,qBACA,wBAAQE,KAAM,SAAUC,QAASF,EAAjC,qBCQGG,MAbf,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,IAAKC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC7C,OACI,+BACI,wCAAWJ,KACX,2CAAcE,KACd,uCAAUD,KACV,yCAAYE,KACZ,qDAAwBC,EAAxB,WCHSC,E,4MAGjBC,MAAQ,CACJN,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAKTP,aAAe,WACX,EAAKa,UAAS,SAACC,GACX,MAAO,CACHR,KAAMQ,EAAUR,KAAM,MAG9B,EAAKS,qBACL,EAAKC,mC,EAGTf,gBAAkB,WACd,EAAKY,UAAS,SAACC,GACX,MAAO,CACHN,QAASM,EAAUN,QAAS,MAGpC,EAAKO,qBACL,EAAKC,mC,EAGTd,YAAc,WACV,EAAKW,UAAS,SAACC,GACX,MAAO,CACHP,IAAKO,EAAUP,IAAK,MAG5B,EAAKQ,qBACL,EAAKC,mC,EAGTD,mBAAqB,WACjB,EAAKF,UAAS,SAACC,GACX,MAAO,CACHL,MAAOK,EAAUR,KAAOQ,EAAUP,IAAMO,EAAUN,a,EAK9DQ,gCAAkC,WAC9B,EAAKH,UAAS,SAACC,GACX,MAAO,CACHJ,mBAAoBO,KAAKC,KAAsB,IAAjBJ,EAAUR,KAAaQ,EAAUL,Y,4CAO3E,WACG,OACG,qCACI,cAAC,EAAD,CAASb,MAAQ,wBAAjB,SACI,cAAC,EAAD,CACII,aAAgBmB,KAAKnB,aACrBC,gBAAmBkB,KAAKlB,gBACxBC,YAAeiB,KAAKjB,gBAG5B,cAAC,EAAD,CAASN,MAAO,YAAhB,SACMuB,KAAKP,MAAMH,MACT,cAAC,EAAD,CACAH,KAAMa,KAAKP,MAAMN,KACjBE,QAASW,KAAKP,MAAMJ,QACpBD,IAAKY,KAAKP,MAAML,IAChBE,MAAOU,KAAKP,MAAMH,MAAQU,KAAKP,MAAMH,MAAQ,EAC7CC,mBAAoBS,KAAKP,MAAMF,mBAAqBS,KAAKP,MAAMF,mBAAqB,IANnE,2D,GAtENU,aCMlBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cc43895c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Section({title, children}) {\r\n    return (\r\n     <section>\r\n         <div className=\"container\">\r\n             <h2>{title}</h2>\r\n             {children}\r\n         </div>\r\n     </section>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Section","import React from \"react\";\r\n\r\nfunction FeedbackOptions({goodFeedback, neutralFeedback, badFeedback}) {\r\n    return (\r\n        <div className='buttons'>\r\n            <button type={\"button\"} onClick={goodFeedback}>Good</button>\r\n            <button type={\"button\"} onClick={neutralFeedback}>Neutral</button>\r\n            <button type={\"button\"} onClick={badFeedback}>Bad</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default FeedbackOptions","import React from \"react\";\r\n\r\nfunction Statistics ({good, bad, neutral, total, positivePercentage}) {\r\n    return (\r\n        <ul>\r\n            <li>Good: {good}</li>\r\n            <li>Neutral: {neutral}</li>\r\n            <li>Bad: {bad}</li>\r\n            <li>Total: {total}</li>\r\n            <li>Positive feedback: {positivePercentage}%</li>\r\n        </ul>\r\n    )\r\n}\r\n\r\n\r\nexport default Statistics","import React, {Component} from 'react'\nimport './App.css';\nimport Section from './components/Section'\nimport FeedbackOptions from \"./components/Section/FeedbackOptions/FeedbackOptions\";\nimport Statistics from \"./components/Section/Statistics/Statistics\";\n\nexport default class App extends Component {\n\n\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n    }\n\n\n\n    goodFeedback = () => {\n        this.setState((prevState) => {\n            return {\n                good: prevState.good +1,\n            }\n        })\n        this.countTotalFeedback();\n        this.countPositiveFeedbackPercentage()\n    }\n\n    neutralFeedback = () => {\n        this.setState((prevState) => {\n            return {\n                neutral: prevState.neutral +1\n            }\n        })\n        this.countTotalFeedback();\n        this.countPositiveFeedbackPercentage()\n    }\n\n    badFeedback = () => {\n        this.setState((prevState) => {\n            return {\n                bad: prevState.bad +1\n            }\n        })\n        this.countTotalFeedback();\n        this.countPositiveFeedbackPercentage()\n    }\n\n    countTotalFeedback = () => {\n        this.setState((prevState) => {\n            return {\n                total: prevState.good + prevState.bad + prevState.neutral\n            }\n        })\n    }\n\n    countPositiveFeedbackPercentage = () => {\n        this.setState((prevState) => {\n            return {\n                positivePercentage: Math.ceil(prevState.good * 100 / prevState.total)\n            }\n        })\n    }\n\n\n\n    render() {\n       return (\n          <>\n              <Section title = 'Please leave feedback'>\n                  <FeedbackOptions\n                      goodFeedback = {this.goodFeedback}\n                      neutralFeedback = {this.neutralFeedback}\n                      badFeedback = {this.badFeedback}\n                  />\n              </Section>\n              <Section title={'Statistic'}>\n                  {!this.state.total ? <p>No feedback given</p> :\n                      <Statistics\n                      good={this.state.good}\n                      neutral={this.state.neutral}\n                      bad={this.state.bad}\n                      total={this.state.total ? this.state.total : 0}\n                      positivePercentage={this.state.positivePercentage ? this.state.positivePercentage : 0}\n                  />}\n              </Section>\n          </>\n       )\n    }\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}